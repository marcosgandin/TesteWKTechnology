unit Model.Pedidos.Produtos;

interface

uses
  Windows, SysUtils, Classes, Controls, Forms, ComCtrls,
  Firedac.Stan.Param, FireDAC.Comp.Client, Data.DB, unit_funcoes;

type
  TPedidosProdutos = class
    private
      FConexao: TFdConnection;
      FId_Pedidos_Produtos : Integer;
      FPedpro_Quantidade : Integer;
      FPedpro_Vlr_Unitario : Double;
      FPedpro_Vlr_Total : Double;
      FId_Ped_Dados_Gerais : Integer;
      FId_Produtos : Integer;
    public
      property Conexao: TFdConnection read FConexao write FConexao;
      property Id_Pedidos_Produtos : Integer read FId_Pedidos_Produtos write FId_Pedidos_Produtos;
      property Pedpro_Quantidade :Integer read FPedpro_Quantidade write FPedpro_Quantidade;
      property Pedpro_Vlr_Unitario : Double read FPedpro_Vlr_Unitario write FPedpro_Vlr_Unitario;
      property Pedpro_Vlr_Total : Double read FPedpro_Vlr_Total write FPedpro_Vlr_Total;
      property Id_Ped_Dados_Gerais : Integer read FId_Ped_Dados_Gerais write FId_Ped_Dados_Gerais;
      property Id_Produtos : Integer read FId_Produtos write FId_Produtos;

      constructor Create( Conexao: TFdConnection);
      destructor Destroy; override;

      procedure Salvar(objPedProd: TPedidosProdutos);
      function fnc_inserir_alterar( TipoOperacao: string; out Erro: string ): Boolean;
      procedure prc_deleta( id_Chave: Integer );
      function fnc_consulta( pChave: Integer ): TFDQuery;
  end;

var
  QryConsulta: TFDQuery;

implementation

{ TPedidosProdutos }

constructor TPedidosProdutos.Create(Conexao: TFdConnection);
begin
  FConexao := Conexao;

  QryConsulta := TFDQuery.Create( nil );
  QryConsulta.Connection := FConexao;
end;

destructor TPedidosProdutos.Destroy;
begin
  QryConsulta.Destroy;
  inherited;
end;

function TPedidosProdutos.fnc_consulta(pChave: Integer): TFDQuery;
begin
  try
    FConexao.Connected := False;
    FConexao.Connected := True;

    QryConsulta.Close;
    QryConsulta.SQL.Clear;
    QryConsulta.SQL.Add('Select id_pedidos_produtos, pedpro_quantidade, pedpro_vlr_unitario, ');
    QryConsulta.SQL.Add('  pedpro_vlr_total, id_id_ped_dados_gerais, id_produtos ');
    QryConsulta.SQL.Add('From pedidos_produtos ');
    QryConsulta.SQL.Add('Where id_pedidos_produtos = :id_pedidos_produtos ');
    QryConsulta.ParamByName('id_pedidos_produtos').AsInteger := pChave;
    QryConsulta.Open;
  finally
    Result := QryConsulta;
  end;
end;

function TPedidosProdutos.fnc_inserir_alterar(TipoOperacao: string;
  out Erro: string): Boolean;
var
  QryInserir: TFDQuery;
begin
  try
    try
      FConexao.Connected := False;
      FConexao.Connected := True;

      QryInserir := TFDQuery.Create( nil );
      QryInserir.Connection := FConexao;

      QryInserir.Close;
      QryInserir.SQL.Clear;

      if TipoOperacao = 'INSERIR' then
      begin
        QryInserir.SQL.Add('Insert into pedidos_produtos (pedpro_quantidade, pedpro_vlr_unitario, ');
        QryInserir.SQL.Add('   pedpro_vlr_total, id_id_ped_dados_gerais, id_produtos) ');
        QryInserir.SQL.Add('Values (:p_pedpro_quantidade, p_pedpro_vlr_unitario, ');
        QryInserir.SQL.Add(' :p_pedpro_vlr_total, :p_id_id_ped_dados_gerais, :p_id_produtos) ');
      end
      else
      begin
        QryInserir.SQL.Add('Update pedidos_produtos set ');
        QryInserir.SQL.Add('  pedpro_quantidade   = :p_pedpro_quantidade, ');
        QryInserir.SQL.Add('  pedpro_vlr_unitario = :p_pedpro_vlr_unitario, ');
        QryInserir.SQL.Add('  pedpro_vlr_total    = :p_pedpro_vlr_total, ');
        QryInserir.SQL.Add('  id_ped_dados_gerais = :p_id_ped_dados_gerais, ');
        QryInserir.SQL.Add('  id_produtos         = :p_id_produtos ');
        QryInserir.SQL.Add('Where id_pedidos_produtos = :p_id_pedidos_produtos ');

        QryInserir.ParamByName('id_pedidos_produtos').AsInteger := FId_Pedidos_Produtos;
      end;

      QryInserir.ParamByName('p_pedpro_quantidade').AsInteger   := FPedpro_Quantidade;
      QryInserir.ParamByName('p_pedpro_vlr_unitario').AsFloat   := FPedpro_Vlr_Unitario;
      QryInserir.ParamByName('p_pedpro_vlr_total').AsFloat      := FPedpro_Vlr_Total;
      QryInserir.ParamByName('p_id_ped_dados_gerais').AsInteger := FId_Ped_Dados_Gerais;
      QryInserir.ParamByName('p_id_produtos').AsInteger         := FId_Produtos;
      QryInserir.ExecSQL;

      Result := True;
    except
      on E : Exception do
      begin
        Erro := E.Message;
        Result := False;
      end;
    end;
  finally
    QryInserir.Destroy;
  end;
end;

procedure TPedidosProdutos.prc_deleta(id_Chave: Integer);
begin
  if fnc_criar_mensagem('Confirmação',
                        'Excluir Dados',
                        'Tem certeza de que deseja EXCLUIR este Produto do Pedido? ',
                        ExtractFilePath( Application.ExeName ) + '\Icons\Aviso_.png',
                        'OK') then
  begin
    FConexao.Connected := False;
    FConexao.Connected := True;

    FConexao.ExecSQL('Delete from pedidos_produtos where id_pedidos_produtos = :id_Chave', [id_Chave]);
  end;
end;

procedure TPedidosProdutos.Salvar(objPedProd: TPedidosProdutos);
begin
var
  QryInserir: TFDQuery;
begin
  try
    try
      FConexao.Connected := False;
      FConexao.Connected := True;

      QryInserir := TFDQuery.Create( nil );
      QryInserir.Connection := FConexao;

      QryInserir.Close;
      QryInserir.SQL.Clear;
      QryInserir.SQL.Add('Insert into pedidos_produtos (pedpro_quantidade, pedpro_vlr_unitario, ');
      QryInserir.SQL.Add('   pedpro_vlr_total, id_id_ped_dados_gerais, id_produtos) ');
      QryInserir.SQL.Add('Values (:p_pedpro_quantidade, p_pedpro_vlr_unitario, ');
      QryInserir.SQL.Add(' :p_pedpro_vlr_total, :p_id_id_ped_dados_gerais, :p_id_produtos) ');
      QryInserir.ParamByName('p_pedpro_quantidade').AsInteger   := FPedpro_Quantidade;
      QryInserir.ParamByName('p_pedpro_vlr_unitario').AsFloat   := FPedpro_Vlr_Unitario;
      QryInserir.ParamByName('p_pedpro_vlr_total').AsFloat      := FPedpro_Vlr_Total;
      QryInserir.ParamByName('p_id_ped_dados_gerais').AsInteger := FId_Ped_Dados_Gerais;
      QryInserir.ParamByName('p_id_produtos').AsInteger         := FId_Produtos;
      QryInserir.ExecSQL;
    except
      on E : Exception do
      begin
        raise Exception.Create(E.Message);
      end;
    end;
  finally
    QryInserir.Destroy;
  end;
end;
end;

end.
